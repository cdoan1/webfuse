---
# Playbook to test EC2 instances with Kind in a single loop using dynamic tower_inventory
# 
# Example Usage:
#
# time ansible-playbook -i ansible/inventory/hosts ansible/kind-dynamic.yml
#
# NOTE:
# [orchestration]
# localhost ansible_connection=local ansible_python_interpreter=/performance-3a/bin/python
#

- name: Create a sandbox instance
  hosts: orchestration
  gather_facts: False
  # vars:
  #   keypair: my_keypair
  #   instance_type: m1.small
  #   security_group: my_securitygroup
  #   image: my_ami_id
  #   region: us-east-1
  tasks:
    - name: Launch instance
      amazon.aws.ec2:
        key_name: "{{ ec2_key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        wait: true
        group: "{{ ec2_security_group }}"
        exact_count: "{{ ec2_instance_count }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        assign_public_ip: yes
        region: "{{ ec2_region }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: "{{ ec2_volume_size }}"
            volume_type: gp2
            delete_on_termination: true
        instance_tags: "{{ ec2_tags }}"
        count_tag: "{{ ec2_tags }}"
      register: ec2

    - debug:
        msg: 
        - "{{ ec2 }}"
        - "{{ ec2.tagged_instances | list }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
      loop: "{{ ec2.instances }}"
      when: ec2.instances is iterable

    - name: Add tagged_instance to host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
      loop: "{{ ec2.tagged_instances }}"
      when: ec2.tagged_instances is iterable

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 60
        timeout: 320
      loop: "{{ ec2.instances }}"
      when: ec2.instances is iterable

- name: Configure instance(s)
  hosts: launched
  become: True
  gather_facts: True
  roles:
    - role: docker
      tags: docker
    - role: kind
      tags: kind
    - role: loop_import
      tags: import

- name: Terminate instances
  hosts: orchestration
  tasks:
    - name: Terminate instances that were previously launched
      amazon.aws.ec2:
        state: 'absent'
        region: "{{ ec2_region }}"
        instance_ids: '{{ ec2.instance_ids }}'
      when: ec2.instance_ids is iterable

- name: Terminate tagged instances
  hosts: orchestration
  tasks:
    - name: Terminate tagged instances that were previously launched
      amazon.aws.ec2:
        state: 'absent'
        region: "{{ ec2_region }}"
        instance_ids: '{{ item.id }}'
      with_items: "{{ ec2.tagged_instances | list }}"
      when: ec2.tagged_instances is defined and ec2.tagged_instances is iterable

